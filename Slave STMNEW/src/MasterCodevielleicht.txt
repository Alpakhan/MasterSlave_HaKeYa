#include "stm32f4xx_hal.h"

I2C_HandleTypeDef hi2c1;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_I2C1_Init();

  uint8_t receivedData[2] = {0};
  while (1)
  {
    // Anfrage von Slave 1 (LED-Zustände: Rot & Blau)
    HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x55 << 1), receivedData, 2, 1000);
    //printf("Slave 1 - Rote LED: %s, Blaue LED: %s\n", receivedData[0] ? "EIN" : "AUS", receivedData[1] ? "EIN" : "AUS");

    // Anfrage von Slave 2 (LED-Zustände: Weiß & Rot)
    HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x56 << 1), receivedData, 2, 1000);
    //printf("Slave 2 - Weiße LED: %s, Gruene LED: %s\n", receivedData[0] ? "EIN" : "AUS", receivedData[1] ? "EIN" : "AUS");

    HAL_Delay(1000);
  }
}

void SystemClock_Config(void)
{
  // System Clock Configuration
}

static void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&hi2c1);
}

static void MX_GPIO_Init(void)
{
  // GPIO Initialization for I2C pins
}


 //Newstuff
#include "stm32f4xx.h"                  // Gerätespezifische Headerdatei

void I2C1_Init(void) {
  // I2C1-Peripherie- und GPIO-Initialisierung mit Annahmen über Clocks und Pins
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // I2C1 Clock einschalten
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // GPIOB Clock einschalten

  // GPIOB für I2C1 konfigurieren (PB6-> SCL, PB7-> SDA)
  GPIOB->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
  GPIOB->MODER |= (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1); // Alternate function
  GPIOB->OTYPER |= (GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7);      // Open-drain
  GPIOB->AFR[0] |= (4 << (4*6)) | (4 << (4*7));                // AF4 für I2C1

  // I2C Konfiguration
  I2C1->CR1 = I2C_CR1_PE;              // Peripherie einschalten
  I2C1->CCR = 80;                      // Clock control
  I2C1->TRISE = 17;                    // Maximum rise time
}

void I2C1_Write(uint8_t address, uint8_t data) {
  // Senden eines einzelnen Bytes an eine Slave-Adresse
  I2C1->CR1 |= I2C_CR1_START;          // Startbedingung senden
  while (!(I2C1->SR1 & I2C_SR1_SB));   // Warten auf Startbedingung
  
  I2C1->DR = address << 1;             // Slave-Adresse senden (Write)
  while (!(I2C1->SR1 & I2C_SR1_ADDR)); // Warten, bis Adresse gesendet wurde

  I2C1->DR = data;                     // Daten senden
  while (!(I2C1->SR1 & I2C_SR1_BTF));  // Warten, bis Byte übertragen wurde

  I2C1->CR1 |= I2C_CR1_STOP;           // Stopbedingung senden
}

int main(void) {
  I2C1_Init();                         // I2C initialisieren
  while(1) {
    I2C1_Write(SLAVE_ADDRESS, 0x00);   // Dummy-Daten an den Slave senden, um Request auszulösen
    for (volatile int i = 0; i < 100000; i++);  // Verzögerung
  }
}
